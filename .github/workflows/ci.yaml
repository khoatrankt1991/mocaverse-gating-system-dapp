name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # === SMART CONTRACT JOB ===
  compile-and-test-smart-contracts:
    name: 🔗 Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: ⬇️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🧰 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'smart-contracts/package-lock.json'
    
    - name: 📦 Install smart contract dependencies
      run: |
        cd smart-contracts
        npm ci --legacy-peer-deps
    
    - name: 🔐 Create .env file for smart contracts
      run: |
        cd smart-contracts
        echo "ALCHEMY_KEY=${{ secrets.ALCHEMY_KEY }}" >> .env
        echo "ACCOUNT_PRIVATE_KEY=${{ secrets.ACCOUNT_PRIVATE_KEY }}" >> .env
    
    - name: 🛠 Compile smart contracts
      run: |
        cd smart-contracts
        npm run compile
      
    - name: 🧪 Run smart contract tests
      run: |
        cd smart-contracts
        npm run test

  # === FRONTEND JOB ===
  lint-build-frontend:
    name: 🎨 Lint & Build Frontend
    runs-on: ubuntu-latest
    needs: compile-and-test-smart-contracts

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 📦 Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: 🧼 Run Prettier check
        run: |
          cd frontend
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: 🧪 Run frontend tests
        run: |
          cd frontend
          npm run test:run

      - name: 📊 Generate coverage report
        run: |
          cd frontend
          npm run test:coverage

      - name: ☁️ Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: 🏗 Run build
        run: |
          cd frontend
          npm run build

      - name: ✅ Verify build output
        run: |
          cd frontend
          ls -la .next/